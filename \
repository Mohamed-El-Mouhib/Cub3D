/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   cub.c                                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mel-mouh <mel-mouh@student.1337.fr>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/13 21:54:38 by mel-mouh          #+#    #+#             */
/*   Updated: 2025/07/29 19:51:51 by mel-mouh         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "includes/cub3d.h"
#include "includes/libft.h"
#include <mlx.h>
#include <stdio.h>
#include <unistd.h>

#define TILE_SIZE 50
#define TILE_SIZE 50
# define WIN_H (TILE_SIZE *11 + 1)
# define WIN_W (TILE_SIZE * 11 + 1)

t_parse	*box(void)
{
	static t_parse var;

	return	(&var);
}

t_cal	*iterators(void)
{
	static t_cal	var;

	return  (&var);
}

t_movment	*pmo(void)
{
	static t_movment pp;

	return (&pp);
}

t_ray	arr[105];

int map[MAP_HEIGHT][MAP_WIDTH] = {
  {1,1,1,1,1,1},
  {1,0,0,0,0,1},
  {1,0,0,0,0,1},
  {1,0,0,0,0,1},
  {1,0,0,0,6,1},
  {1,1,1,1,1,1},
};

void	pixel_put(t_data *buff, int x, int y, unsigned int color)
{
	unsigned int	offset;

	if (x < 0 || y < 0 || x > buff->width || y > buff->height)
		return ;
	offset = (y * buff->line_len + x * (buff->bpp / 8));
	*((unsigned int *)(buff->addr + offset)) = color;
}

typedef struct s_game {
	void	*win;
	void	*mlx;
	t_data scene;
} t_game;

void ft_exit_error(char *msg)
{
	write(STDERR_FILENO, msg, ft_strlen(msg));	
	exit(1);
}


int loop()
{
	
	return (0);
}

t_vec2 vec2_sub(t_vec2 p1, t_vec2 p2)
{
	t_vec2 result;

	result.x = p1.x - p2.x;
	result.y = p1.y - p2.y;
	return (result);
}


/**
 * draw_vertical_line - draw vertica line
 */
void draw_vertical_line(t_data *buff, t_vec2 p1, double len, int color)
{
	t_vec2 p;

	if (len < 0)
	{
		p1.y += len;
		draw_vertical_line(buff, p1, len * -1, color);
		return ;
	}
	p.x = p1.x;
	p.y = p1.y;
	while (len > 0)
	{
		pixel_put(buff, p.x, p.y, color);
		len--;
		p.y++;
	}
}

void draw_horizontal_line(t_data *buff, t_vec2 p1, double len, int color)
{
	t_vec2 p;

	if (len < 0)
	{
		p1.x += len;
		draw_vertical_line(buff, p1, len * -1, color);
		return ;
	}
	p.x = p1.x;
	p.y = p1.y;
	while (len > 0)
	{
		pixel_put(buff, p.x, p.y, color);
		len--;
		p.x++;
	}
}

void draw_line(t_data *buff, t_vec2 p1, t_vec2 p2, int color)
{
	double k;
	double c;
	t_vec2 p;
	t_vec2 sub;

	sub = vec2_sub(p1, p2);
	if (sub.x == 0)
		k = 0;
	else
		k = sub.y / sub.x;
	c = p1.y - k*p1.x;
	if (k == 0)
		draw_vertical_line(buff, p1, p2.y - p1.y, color);
	else
	{
		p.x = p1.x;
		if (p.x > p2.x)
		{
			while (p.x > p2.x)
			{
				p.y = p.x *k + c;
				pixel_put(buff, p.x, p.y, color);
				p.x -= 1;
			}
		}
		else
		{
			while (p.x < p2.x)
			{
				p.y = p.x *k + c;
				pixel_put(buff, p.x, p.y, color);
				p.x += 1;
			}
		}
	}
}


void fill_vertical_line(void *img, int cx, int cy, int x, int y, int color)
{
	int i;

	if (x < 0 || x >= WIN_W || y < 0 || y >= WIN_H)
		return;
	i = cy;
	while (i != y)
	{
		pixel_put(img, x, i, color);
		i += (y > cy ? 1 : -1);
	}
	pixel_put(img, x, y, color);
}


void draw_filled_circle(void *img, t_vec2 c, int r, int color)
{
	int x = 0;
	int y = -r;
	int p = -r;

	x = 0;
	y = -r;
	p = -r;
	while (x < -y)
	{
		if (p > 0)
		{
			y += 1;
			p += 2 * (x + y) + 1;
		}
		else
		{
			p += 2 * x + 1;
		}
		fill_vertical_line(img, c.x, c.y, c.x + x, c.y + y, color);
		fill_vertical_line(img, c.x, c.y, c.x - x, c.y + y, color);
		fill_vertical_line(img, c.x, c.y, c.x + x, c.y - y, color);
		fill_vertical_line(img, c.x, c.y, c.x - x, c.y - y, color);
		fill_vertical_line(img, c.x, c.y, c.x + y, c.y + x, color);
		fill_vertical_line(img, c.x, c.y, c.x + y, c.y - x, color);
		fill_vertical_line(img, c.x, c.y, c.x - y, c.y + x, color);
		fill_vertical_line(img, c.x, c.y, c.x - y, c.y - x, color);
		x += 1;
	}
}


void draw_circle(t_data *buff, t_vec2 center, int radius, int color)
{
	int x = 0;
	int y = -radius;
	int p = -radius;

	while (x < -y)
	{
		if (p > 0)
		{
			y += 1;
			p += 2 * (x + y) + 1;
		}
		else
			p += 2 * x + 1;
		pixel_put(buff, center.x + x, center.y + y, color);
		pixel_put(buff, center.x - x, center.y + y, color);
		pixel_put(buff, center.x + x, center.y - y, color);
		pixel_put(buff, center.x - x, center.y - y, color);
		pixel_put(buff, center.x + y, center.y + x, color);
		pixel_put(buff, center.x + y, center.y - x, color);
		pixel_put(buff, center.x - y, center.y + x, color);
		pixel_put(buff, center.x - y, center.y - x, color);
		x += 1;
	}
}


t_data new_img_buff(t_game *game, int width, int height)
{
	t_data img;

	img.img    = mlx_new_image(game->mlx, width, height);
	img.width  = width;
	img.height = height;
	img.addr   = mlx_get_data_addr(img.img, &img.bpp, &img.line_len, &img.endian);
	return (img);
}


void init_game(t_game *game)
{
	game->mlx = mlx_init();
	if (!game->mlx)
		ft_exit_error("Faild to allocate mlx");
	game->win = mlx_new_window(game->mlx, WIN_W, WIN_H, "Hello world!");
	if (!game->win)
		ft_exit_error("Faild to allocate window");
	game->scene = new_img_buff(game, WIN_W, WIN_H);
}

t_vec2 vec2_new(double x, double y)
{
	t_vec2 vector;

	vector.x = x;
	vector.y = y;
	return (vector);
}

int	key_even_handler(int event_c_)
{
	if (event_c_ == XK_Escape)
		exit(0);
	return (0);
}

#define RED 0xFF0000
#define GREEN 0x00FF00
#define BLUE 0x0000FF


void draw_grid(t_data  *buff)
{
	t_vec2 start = vec2_new(0, 0);
	for (int i = 0; i  <=  WIN_H; i+= TILE_SIZE)
	{
		start.y = i;
		draw_horizontal_line(buff, start, WIN_W, RED);
	}
	start = vec2_new(0, 0);
	for (int i = 0; i  <=  WIN_W; i+= TILE_SIZE)
	{
		start.x = i;
		draw_vertical_line(buff, start, WIN_H, RED);
	}
}



t_vec2 mouse_pos;
int handle_mouse_event(int x,int y, t_game *game)
{
	mouse_pos.x = x;
	mouse_pos.y = y;
	return (0);
}

#include <sys/time.h>

time_t	curr_time_ms(void)
{
	struct timeval	tv;

	gettimeofday(&tv, NULL);
	return (tv.tv_sec * 1000 + tv.tv_usec / 1000);
}

void clear_img(t_data *img)
{
	if (!img->addr) 
		return ;
	ft_bzero(img->addr, img->width * img->height * 4);
}

#define FRAME_RATE 60
#define ONE_FRAME_TIME 1000 / FRAME_RATE
int fun(t_game *game)
{
	static time_t last_frame_time;

	
	// 	return (0);
	last_frame_time = curr_time_ms();
	// clear_img(&game->scene);
	draw_grid(&game->scene);
	draw_circle(&game->scene, vec2_new(mouse_pos.x, mouse_pos.y), 5, GREEN);
	mlx_put_image_to_window(game->mlx, game->win,game->scene.img, 0, 0);
	return (0);
}

int	main()
{
	t_game game;


	init_game(&game);

	mlx_loop_hook(game.mlx, fun, &game);
	mlx_hook(game.win, 02, 1L<<0, key_even_handler, 0);
	mlx_hook(game.win, 03, 1L<<1, key_even_handler, 0);
	mlx_hook(game.win, 06, 1L<<6, handle_mouse_event, &game); // for mouse
	mlx_loop(game.mlx);
	return (0);
}
